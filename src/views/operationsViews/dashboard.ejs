<%- include('../partials/generalHeader', {pageTitle: pageTitle}) %>

<!-- Socket.IO Client -->
<script src="/socket.io/socket.io.js"></script>
<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="container-fluid">
    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <h5 class="card-title">Agentes Activos</h5>
                    <h2><%= agents.filter(a => a.status === 'available').length %></h2>
                    <small>Total: <%= agents.length %></small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <h5 class="card-title">En Llamada</h5>
                    <h2><%= agents.filter(a => a.status === 'on_call').length %></h2>
                    <small>Agentes ocupados</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <h5 class="card-title">Campañas Activas</h5>
                    <h2><%= activeCampaigns.length %></h2>
                    <small>En curso</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <h5 class="card-title">Productividad</h5>
                    <h2><%= productivityMetrics.productivityPercentage %>%</h2>
                    <small>Promedio del equipo</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-dark text-white">
                <div class="card-body">
                    <h5 class="card-title">Agentes Conectados</h5>
                    <h2 id="connectedAgentsCount">0</h2>
                    <small>WebSocket activos</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Agent Status Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Estado de Agentes</h5>
                    <div>
                        <span class="badge badge-success mr-2" id="wsStatus">Desconectado</span>
                        <button class="btn btn-sm btn-outline-primary" onclick="refreshAgentStatus()">
                            <i class="fas fa-sync-alt"></i> Actualizar
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped" id="agentsTable">
                            <thead>
                                <tr>
                                    <th>Agente</th>
                                    <th>Estado</th>
                                    <th>Último Cambio</th>
                                    <th>Tiempo en Estado</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% agents.forEach(agent => { %>
                                <tr data-agent-id="<%= agent.id %>" data-is-online="false">
                                    <td>
                                        <%= agent.primerNombre %> <%= agent.primerApellido %>
                                        <br><small class="text-muted">@<%= agent.username %></small>
                                        <br><span class="badge badge-pill badge-secondary" id="connection-badge-<%= agent.id %>">Offline</span>
                                    </td>
                                    <td>
                                        <span class="badge badge-status status-badge" 
                                            data-status="<%= agent.status %>"
                                            style="<%= getStatusBadgeStyle(agent.status) %>">
                                            <%= getStatusText(agent.status) %>
                                        </span>
                                    </td>
                                    <td>
                                        <%= agent.lastStatusChange ? new Date(agent.lastStatusChange).toLocaleString() : 'N/A' %>
                                    </td>
                                    <td>
                                        <span class="duration" data-timestamp="<%= agent.lastStatusChange %>">
                                            <%= calculateDuration(agent.lastStatusChange) %>
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-success status-btn" 
                                                    onclick="updateAgentStatus(<%= agent.id %>, 'available')"
                                                    data-target-status="available"
                                                    <%= agent.status === 'available' ? 'disabled' : '' %>>
                                                <i class="fas fa-check"></i> Disponible
                                            </button>
                                            <button class="btn btn-outline-warning status-btn" 
                                                    onclick="updateAgentStatus(<%= agent.id %>, 'break')"
                                                    data-target-status="break"
                                                    <%= agent.status === 'break' ? 'disabled' : '' %>>
                                                <i class="fas fa-pause"></i> Pausa
                                            </button>
                                            <button class="btn btn-outline-info status-btn" 
                                                    onclick="updateAgentStatus(<%= agent.id %>, 'wrap_up')"
                                                    data-target-status="wrap_up"
                                                    <%= agent.status === 'wrap_up' ? 'disabled' : '' %>>
                                                <i class="fas fa-edit"></i> Wrap
                                            </button>
                                            <button class="btn btn-outline-danger status-btn" 
                                                    onclick="updateAgentStatus(<%= agent.id %>, 'offline')"
                                                    data-target-status="offline"
                                                    <%= agent.status === 'offline' ? 'disabled' : '' %>>
                                                <i class="fas fa-sign-out-alt"></i> Offline
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                <% }) %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Distribution and Recent Activity -->
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Distribución de Estados</h5>
                </div>
                <div class="card-body">
                    <canvas id="statusChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Productividad del Equipo</h5>
                </div>
                <div class="card-body">
                    <canvas id="productivityChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Productivity Table -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Métricas de Productividad por Agente</h5>
                    <button class="btn btn-sm btn-outline-info" onclick="loadProductivityData()">
                        <i class="fas fa-chart-bar"></i> Cargar Datos
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped" id="productivityTable">
                            <thead>
                                <tr>
                                    <th>Agente</th>
                                    <th>Llamadas Atendidas</th>
                                    <th>Tiempo Total Hablado</th>
                                    <th>Tiempo Promedio por Llamada</th>
                                    <th>Tiempo Disponible</th>
                                    <th>Score Productividad</th>
                                    <th>Tasa Utilización</th>
                                </tr>
                            </thead>
                            <tbody id="productivityTableBody">
                                <tr>
                                    <td colspan="7" class="text-center text-muted">
                                        <i class="fas fa-spinner fa-spin"></i> Cargando datos de productividad...
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Real-time Activity Feed -->
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Actividad Reciente</h5>
                </div>
                <div class="card-body">
                    <div class="activity-feed" id="activityFeed" style="max-height: 300px; overflow-y: auto;">
                        <% todayStatusLogs.forEach(log => { %>
                        <div class="activity-item mb-2" data-log-id="<%= log.id %>">
                            <div class="d-flex justify-content-between">
                                <strong><%= log.agent.primerNombre %> <%= log.agent.primerApellido %></strong>
                                <small class="text-muted"><%= new Date(log.timestamp).toLocaleTimeString() %></small>
                            </div>
                            <small class="text-muted">
                                Cambió a: <span class="badge badge-secondary"><%= getStatusText(log.status) %></span>
                                <% if (log.metadata && log.metadata.reason) { %>
                                    - <%= log.metadata.reason %>
                                <% } %>
                            </small>
                        </div>
                        <% }) %>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Comandos Rápidos</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-2">
                            <button class="btn btn-warning btn-block" onclick="sendCommandToAllAgents('refresh')">
                                <i class="fas fa-sync"></i> Actualizar Todos
                            </button>
                        </div>
                        <div class="col-md-6 mb-2">
                            <button class="btn btn-info btn-block" onclick="sendCommandToAllAgents('check_status')">
                                <i class="fas fa-info-circle"></i> Verificar Estado
                            </button>
                        </div>
                        <div class="col-md-6 mb-2">
                            <button class="btn btn-success btn-block" onclick="setAllAgentsStatus('available')">
                                <i class="fas fa-users"></i> Todos Disponibles
                            </button>
                        </div>
                        <div class="col-md-6 mb-2">
                            <button class="btn btn-danger btn-block" onclick="sendCommandToAllAgents('logout')">
                                <i class="fas fa-sign-out-alt"></i> Cerrar Sesión Todos
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Agent Command Modal -->
<div class="modal fade" id="agentCommandModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Enviar Comando a Agente</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Agente:</label>
                    <input type="text" class="form-control" id="commandAgentName" readonly>
                </div>
                <div class="form-group">
                    <label>Comando:</label>
                    <select class="form-control" id="commandType">
                        <option value="refresh">Actualizar Estado</option>
                        <option value="check_status">Verificar Conexión</option>
                        <option value="force_logout">Forzar Cierre de Sesión</option>
                        <option value="custom">Comando Personalizado</option>
                    </select>
                </div>
                <div class="form-group" id="customCommandGroup" style="display:none;">
                    <label>Mensaje Personalizado:</label>
                    <textarea class="form-control" id="customCommand" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="sendCommandToAgent()">Enviar Comando</button>
            </div>
        </div>
    </div>
</div>

<script>
// Global variables
let socket;
let statusChart;
let productivityChart;
let selectedAgentId = null;

// Initialize WebSocket connection
function initializeWebSocket() {
    socket = io();
    
    socket.on('connect', () => {
        console.log('🔌 Connected to WebSocket server');
        updateConnectionStatus(true);
        
        // Authenticate as operations user
        socket.emit('authenticate', {
            userId: <%= user ? user.id : 'null' %>,
            role: '<%= user ? user.rol : "OPERATIONS" %>'
        });
    });
    
    socket.on('authenticated', (data) => {
        console.log('✅ Authenticated successfully');
        showAlert('Conectado correctamente', 'success');
    });
    
    socket.on('error', (error) => {
        console.error('❌ Socket error:', error);
        showAlert(error.message || 'Error de conexión', 'error');
    });
    
    socket.on('agent_connected', (data) => {
        console.log('🤖 Agent connected:', data.agentName);
        updateAgentConnectionStatus(data.agentId, true);
        addActivityItem(`${data.agentName} se conectó`, 'info');
    });
    
    socket.on('agent_disconnected', (data) => {
        console.log('👋 Agent disconnected:', data.agentName);
        updateAgentConnectionStatus(data.agentId, false);
        addActivityItem(`${data.agentName} se desconectó`, 'warning');
    });
    
    socket.on('agent_status_updated', (data) => {
        console.log('🔄 Agent status updated:', data);
        updateAgentStatusInTable(data.agentId, data.status, data.timestamp);
        updateStatusChart();
        addActivityItem(
            `Estado de agente actualizado: ${data.status}`,
            'info',
            data.reason,
            data.changedBy?.name
        );
    });
    
    socket.on('agent_status_list', (data) => {
        console.log('📋 Received agent status list');
        updateAllAgentsStatus(data.agents);
    });
    
    socket.on('disconnect', () => {
        console.log('🔌 Disconnected from WebSocket server');
        updateConnectionStatus(false);
    });
}

// Update connection status indicator
function updateConnectionStatus(connected) {
    const statusElement = document.getElementById('wsStatus');
    if (connected) {
        statusElement.textContent = 'Conectado';
        statusElement.className = 'badge badge-success';
    } else {
        statusElement.textContent = 'Desconectado';
        statusElement.className = 'badge badge-danger';
    }
}

// Update agent connection status in table
function updateAgentConnectionStatus(agentId, isOnline) {
    const row = document.querySelector(`tr[data-agent-id="${agentId}"]`);
    if (row) {
        row.dataset.isOnline = isOnline;
        const badge = document.getElementById(`connection-badge-${agentId}`);
        if (badge) {
            badge.textContent = isOnline ? 'Online' : 'Offline';
            badge.className = isOnline ? 'badge badge-pill badge-success' : 'badge badge-pill badge-secondary';
        }
    }
    updateConnectedAgentsCount();
}

// Update agent status in table
function updateAgentStatusInTable(agentId, status, timestamp) {
    const row = document.querySelector(`tr[data-agent-id="${agentId}"]`);
    if (row) {
        const statusBadge = row.querySelector('.status-badge');
        const durationCell = row.querySelector('.duration');
        
        if (statusBadge) {
            statusBadge.dataset.status = status;
            statusBadge.style.cssText = getStatusBadgeStyle(status);
            statusBadge.textContent = getStatusText(status);
        }
        
        if (durationCell) {
            durationCell.dataset.timestamp = timestamp;
            durationCell.textContent = calculateDuration(timestamp);
        }
        
        // Update buttons
        row.querySelectorAll('.status-btn').forEach(btn => {
            btn.disabled = btn.dataset.targetStatus === status;
        });
    }
}

// Update all agents status
function updateAllAgentsStatus(agents) {
    agents.forEach(agent => {
        updateAgentConnectionStatus(agent.id, agent.isOnline);
        if (agent.status) {
            updateAgentStatusInTable(agent.id, agent.status, agent.lastStatusChange);
        }
    });
}

// Update connected agents count
function updateConnectedAgentsCount() {
    const onlineCount = document.querySelectorAll('tr[data-is-online="true"]').length;
    document.getElementById('connectedAgentsCount').textContent = onlineCount;
}

// Add activity item to feed
function addActivityItem(message, type = 'info', reason = '', changedBy = '') {
    const feed = document.getElementById('activityFeed');
    const item = document.createElement('div');
    item.className = 'activity-item mb-2';
    
    const time = new Date().toLocaleTimeString();
    let content = `
        <div class="d-flex justify-content-between">
            <strong>${changedBy ? changedBy + ': ' : ''}${message}</strong>
            <small class="text-muted">${time}</small>
        </div>
    `;
    
    if (reason) {
        content += `<small class="text-muted">- ${reason}</small>`;
    }
    
    item.innerHTML = content;
    feed.insertBefore(item, feed.firstChild);
    
    // Keep only last 20 items
    while (feed.children.length > 20) {
        feed.removeChild(feed.lastChild);
    }
}

// Initialize charts
function initializeStatusChart() {
    const ctx = document.getElementById('statusChart').getContext('2d');
    const statusData = <%- JSON.stringify(statusDistribution) %>;
    
    const labels = statusData.map(item => getStatusText(item.status));
    const data = statusData.map(item => item.count);
    const colors = [
        '#28a745', // available - green
        '#dc3545', // on_call - red  
        '#ffc107', // wrap_up - yellow
        '#17a2b8', // break - blue
        '#6c757d'  // offline - gray
    ];
    
    statusChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: labels,
            datasets: [{
                data: data,
                backgroundColor: colors,
                borderWidth: 2,
                borderColor: '#fff'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            }
        }
    });
}

function initializeProductivityChart() {
    const ctx = document.getElementById('productivityChart').getContext('2d');
    
    productivityChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Llamadas', 'Hablando', 'Disponible', 'Pausa'],
            datasets: [{
                label: 'Tiempo (minutos)',
                data: [0, 0, 0, 0],
                backgroundColor: [
                    '#007bff',
                    '#28a745', 
                    '#ffc107',
                    '#dc3545'
                ]
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });
}

// Update status chart
function updateStatusChart() {
    if (!statusChart) return;
    
    // Get current status distribution from table
    const statusCounts = {
        available: 0,
        on_call: 0,
        wrap_up: 0,
        break: 0,
        offline: 0
    };
    
    document.querySelectorAll('.status-badge').forEach(badge => {
        const status = badge.dataset.status;
        if (statusCounts.hasOwnProperty(status)) {
            statusCounts[status]++;
        }
    });
    
    const data = Object.values(statusCounts);
    statusChart.data.datasets[0].data = data;
    statusChart.update();
}

// Load productivity data
async function loadProductivityData() {
    try {
        const tbody = document.getElementById('productivityTableBody');
        tbody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center text-muted">
                    <i class="fas fa-spinner fa-spin"></i> Cargando datos de productividad...
                </td>
            </tr>
        `;
        
        const response = await fetch('/operations/api/reports/productivity');
        const result = await response.json();
        
        if (result.success) {
            displayProductivityData(result.data);
            updateProductivityChart(result.data);
        } else {
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" class="text-center text-danger">
                        Error: ${result.message}
                    </td>
                </tr>
            `;
        }
    } catch (error) {
        console.error('Error loading productivity data:', error);
        const tbody = document.getElementById('productivityTableBody');
        tbody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center text-danger">
                    Error de conexión al cargar datos
                </td>
            </tr>
        `;
    }
}

// Display productivity data in table
function displayProductivityData(data) {
    const tbody = document.getElementById('productivityTableBody');
    
    if (!data || data.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center text-muted">
                    No hay datos de productividad disponibles
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = data.map(agent => `
        <tr>
            <td>${agent.agentName}</td>
            <td>${agent.totalCalls || 0}</td>
            <td>${agent.totalTalkTime || 0} min</td>
            <td>${agent.averageCallDuration || 0} min</td>
            <td>${agent.totalAvailableTime || 0} min</td>
            <td>
                <div class="progress" style="height: 20px;">
                    <div class="progress-bar ${getProductivityBarClass(agent.productivityScore)}" 
                         style="width: ${agent.productivityScore}%">
                        ${agent.productivityScore}%
                    </div>
                </div>
            </td>
            <td>${agent.utilizationRate || 0}%</td>
        </tr>
    `).join('');
}

// Update productivity chart
function updateProductivityChart(data) {
    if (!productivityChart || !data || data.length === 0) return;
    
    const totals = data.reduce((acc, agent) => {
        acc.calls += agent.totalCalls || 0;
        acc.talkTime += agent.totalTalkTime || 0;
        acc.availableTime += agent.totalAvailableTime || 0;
        acc.breakTime += agent.totalBreakTime || 0;
        return acc;
    }, { calls: 0, talkTime: 0, availableTime: 0, breakTime: 0 });
    
    productivityChart.data.datasets[0].data = [
        totals.calls,
        totals.talkTime,
        totals.availableTime, 
        totals.breakTime
    ];
    
    productivityChart.update();
}

// Send command to all agents
function sendCommandToAllAgents(command) {
    if (!socket || !socket.connected) {
        showAlert('No hay conexión WebSocket activa', 'error');
        return;
    }
    
    const commands = {
        'refresh': 'Actualizar estado',
        'check_status': 'Verificar estado',
        'available': 'Cambiar a disponible',
        'logout': 'Cerrar sesión'
    };
    
    const confirmMessage = `¿Está seguro de enviar el comando "${commands[command]}" a todos los agentes conectados?`;
    
    if (confirm(confirmMessage)) {
        // This would be implemented on the server side
        showAlert('Comando enviado a todos los agentes', 'success');
    }
}

// Send command to specific agent
function sendCommandToAgent(agentId, command) {
    selectedAgentId = agentId;
    
    const agent = agents.find(a => a.id === agentId);
    if (agent) {
        document.getElementById('commandAgentName').value = `${agent.primerNombre} ${agent.primerApellido}`;
    }
    
    $('#agentCommandModal').modal('show');
}

// Set all agents status
async function setAllAgentsStatus(status) {
    if (!confirm(`¿Está seguro de cambiar a todos los agentes al estado "${getStatusText(status)}"?`)) {
        return;
    }
    
    try {
        const agents = Array.from(document.querySelectorAll('tr[data-agent-id]')).map(row => row.dataset.agentId);
        
        for (const agentId of agents) {
            await fetch(`/operations/api/agents/${agentId}/status`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    status: status,
                    reason: 'Cambio masivo por operaciones'
                })
            });
        }
        
        showAlert(`Todos los agentes cambiados a ${getStatusText(status)}`, 'success');
        refreshAgentStatus();
    } catch (error) {
        console.error('Error setting all agents status:', error);
        showAlert('Error al cambiar estado de los agentes', 'error');
    }
}

// Helper functions
function getStatusText(status) {
    const texts = {
        'available': 'Disponible',
        'on_call': 'En Llamada',
        'wrap_up': 'Post-llamada',
        'break': 'Pausa',
        'offline': 'Desconectado'
    };
    return texts[status] || status;
}

function getStatusBadgeStyle(status) {
    const styles = {
        'available': 'background-color: #28a745;',
        'on_call': 'background-color: #dc3545;',
        'wrap_up': 'background-color: #ffc107;',
        'break': 'background-color: #17a2b8;',
        'offline': 'background-color: #6c757d;'
    };
    return styles[status] || 'background-color: #6c757d;';
}

function getProductivityBarClass(score) {
    if (score >= 80) return 'bg-success';
    if (score >= 60) return 'bg-warning';
    return 'bg-danger';
}

function calculateDuration(timestamp) {
    if (!timestamp) return 'N/A';
    
    const now = new Date();
    const then = new Date(timestamp);
    const diff = Math.floor((now - then) / 1000); // seconds
    
    if (diff < 60) return `${diff}s`;
    if (diff < 3600) return `${Math.floor(diff / 60)}m`;
    return `${Math.floor(diff / 3600)}h ${Math.floor((diff % 3600) / 60)}m`;
}

function showAlert(message, type = 'info') {
    // Simple alert implementation
    console.log(`[${type.toUpperCase()}] ${message}`);
    // In a real implementation, you would use a proper notification system
}

// Agent status management (from original code)
async function updateAgentStatus(agentId, status) {
    const reason = prompt('Motivo del cambio de estado:');
    if (reason === null) return;
    
    try {
        const response = await fetch(`/operations/api/agents/${agentId}/status`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status, reason })
        });
        
        const result = await response.json();
        if (result.success) {
            showAlert('Estado actualizado correctamente', 'success');
            // The WebSocket will update the UI automatically
        } else {
            showAlert(result.message || 'Error al actualizar estado', 'error');
        }
    } catch (error) {
        console.error('Error updating agent status:', error);
        showAlert('Error de conexión', 'error');
    }
}

async function refreshAgentStatus() {
    try {
        const response = await fetch('/operations/api/agents');
        const result = await response.json();
        
        if (result.success) {
            updateAllAgentsStatus(result.data.map(agent => ({
                ...agent,
                isOnline: document.querySelector(`tr[data-agent-id="${agent.id}"]`)?.dataset.isOnline === 'true'
            })));
        }
    } catch (error) {
        console.error('Error refreshing agent status:', error);
    }
}

// Update durations every minute
setInterval(() => {
    document.querySelectorAll('.duration').forEach(el => {
        const timestamp = el.dataset.timestamp;
        if (timestamp) {
            el.textContent = calculateDuration(timestamp);
        }
    });
}, 60000);

// Handle command type change
document.getElementById('commandType')?.addEventListener('change', function() {
    const customGroup = document.getElementById('customCommandGroup');
    customGroup.style.display = this.value === 'custom' ? 'block' : 'none';
});

// Initialize on page load
document.addEventListener('DOMContentLoaded', () => {
    initializeWebSocket();
    initializeStatusChart();
    initializeProductivityChart();
    loadProductivityData();
    
    // Auto-refresh every 30 seconds
    setInterval(refreshAgentStatus, 30000);
    setInterval(updateStatusChart, 30000);
    
    // Initial connected agents count
    updateConnectedAgentsCount();
});

// EJS Helper Function
function getStatusText(status) {
    const texts = {
        'available': 'Disponible',
        'on_call': 'En Llamada',
        'wrap_up': 'Post-llamada',
        'break': 'Pausa',
        'offline': 'Desconectado'
    };
    return texts[status] || status;
}

function getStatusBadgeStyle(status) {
    const styles = {
        'available': 'background-color: #28a745;',
        'on_call': 'background-color: #dc3545;',
        'wrap_up': 'background-color: #ffc107;',
        'break': 'background-color: #17a2b8;',
        'offline': 'background-color: #6c757d;'
    };
    return styles[status] || 'background-color: #6c757d;';
}
</script>

<style>
.badge-status {
    font-size: 0.8em;
    padding: 0.4em 0.6em;
}

.activity-item {
    border-left: 3px solid #007bff;
    padding-left: 1rem;
}

.activity-item:not(:last-child) {
    border-bottom: 1px solid #eee;
    padding-bottom: 0.5rem;
}

.duration {
    font-family: monospace;
    font-size: 0.9em;
}

.status-badge {
    transition: all 0.3s ease;
}

.status-btn {
    transition: all 0.2s ease;
}

.status-btn:not(:disabled):hover {
    transform: scale(1.05);
}

.progress {
    background-color: #e9ecef;
}

.card {
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    transition: box-shadow 0.15s ease-in-out;
}

.card:hover {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
}

#wsStatus {
    transition: all 0.3s ease;
}
</style>

<%- include('../partials/generalBody') %>

