/**
 * Script de Setup Completo para Testing
 *
 * Crea un ambiente completo de testing con:
 * - Usuarios de prueba (admin + agentes)
 * - Formularios de ejemplo
 * - Campa√±as de ejemplo
 * - Registros de contactos
 * - Disposiciones b√°sicas
 *
 * Uso: npm run setup:testing
 */

import db from '../models/index.js';
import bcrypt from 'bcrypt';

const { User, Formulario, Campana, BaseCampana, Disposicion } = db;

// Datos de usuarios
const testUsers = [
    {
        primerNombre: 'Admin',
        segundoNombre: 'Test',
        primerApellido: 'Welcomedly',
        segundoApellido: 'QA',
        identificacion: '1000000001',
        correo: 'admin.test@welcomedly.com',
        username: 'admin.test',
        contrasena: 'Test2025!',
        rol: 'ADMIN',
        estado: true
    },
    {
        primerNombre: 'Agente',
        segundoNombre: 'Test',
        primerApellido: 'Uno',
        segundoApellido: 'QA',
        identificacion: '1000000002',
        correo: 'agente.test1@welcomedly.com',
        username: 'agente.test1',
        contrasena: 'Test2025!',
        rol: 'AGENTE',
        estado: true
    },
    {
        primerNombre: 'Agente',
        segundoNombre: 'Test',
        primerApellido: 'Dos',
        segundoApellido: 'QA',
        identificacion: '1000000003',
        correo: 'agente.test2@welcomedly.com',
        username: 'agente.test2',
        contrasena: 'Test2025!',
        rol: 'AGENTE',
        estado: true
    }
];

// Disposiciones b√°sicas
const disposiciones = [
    { nombre: 'Venta Cerrada', descripcion: 'Contacto exitoso con venta' },
    { nombre: 'Interesado', descripcion: 'Cliente muestra inter√©s, seguimiento posterior' },
    { nombre: 'No Interesado', descripcion: 'Cliente rechaza oferta' },
    { nombre: 'Volver a Llamar', descripcion: 'Agendamiento de callback' },
    { nombre: 'No Contesta', descripcion: 'Llamada sin respuesta' },
    { nombre: 'N√∫mero Equivocado', descripcion: 'Contacto incorrecto' },
    { nombre: 'Buz√≥n de Voz', descripcion: 'Llamada redirigida a buz√≥n' },
    { nombre: 'Ocupado', descripcion: 'L√≠nea ocupada' }
];

async function setupTestingEnvironment() {
    try {
        console.log('\nüß™ ========================================');
        console.log('   SETUP COMPLETO - AMBIENTE DE TESTING');
        console.log('========================================\n');

        // Validar ambiente
        if (process.env.NODE_ENV === 'production') {
            console.error('‚ùå ERROR: Este script NO debe ejecutarse en producci√≥n\n');
            process.exit(1);
        }

        console.log('üìã Ambiente: ' + (process.env.NODE_ENV || 'development'));
        console.log('üóÑÔ∏è  Base de datos: ' + process.env.DB_NAME + '\n');

        // ========================
        // 1. CREAR USUARIOS
        // ========================
        console.log('üë§ PASO 1/5: Creando usuarios de prueba...\n');

        let usersCreated = 0;
        let adminUserId = null;
        let agenteUserIds = [];

        for (const userData of testUsers) {
            const existingUser = await User.findOne({
                where: { username: userData.username }
            });

            if (existingUser) {
                console.log(`   ‚è≠Ô∏è  ${userData.username} ya existe (ID: ${existingUser.id})`);
                if (userData.rol === 'ADMIN') {
                    adminUserId = existingUser.id;
                } else {
                    agenteUserIds.push(existingUser.id);
                }
                continue;
            }

            const salt = await bcrypt.genSalt(10);
            const hashedPassword = await bcrypt.hash(userData.contrasena, salt);

            const newUser = await User.create({
                ...userData,
                contrasena: hashedPassword
            });

            console.log(`   ‚úÖ ${userData.username} (${userData.rol}) - ID: ${newUser.id}`);
            usersCreated++;

            if (userData.rol === 'ADMIN') {
                adminUserId = newUser.id;
            } else {
                agenteUserIds.push(newUser.id);
            }
        }

        console.log(`\n   üìä Usuarios: ${usersCreated} creados\n`);

        // ========================
        // 2. CREAR DISPOSICIONES
        // ========================
        console.log('üè∑Ô∏è  PASO 2/5: Creando disposiciones...\n');

        let disposicionesCreadas = 0;

        for (const disp of disposiciones) {
            const existing = await Disposicion.findOne({
                where: { nombre: disp.nombre }
            });

            if (existing) {
                console.log(`   ‚è≠Ô∏è  ${disp.nombre} ya existe`);
                continue;
            }

            await Disposicion.create(disp);
            console.log(`   ‚úÖ ${disp.nombre}`);
            disposicionesCreadas++;
        }

        console.log(`\n   üìä Disposiciones: ${disposicionesCreadas} creadas\n`);

        // ========================
        // 3. CREAR FORMULARIO
        // ========================
        console.log('üìù PASO 3/5: Creando formulario de ejemplo...\n');

        const formularioExistente = await Formulario.findOne({
            where: { nombre: 'Formulario Testing' }
        });

        let formulario;
        if (formularioExistente) {
            console.log(`   ‚è≠Ô∏è  Formulario ya existe (ID: ${formularioExistente.id})\n`);
            formulario = formularioExistente;
        } else {
            formulario = await Formulario.create({
                nombre: 'Formulario Testing',
                campos: [
                    'Venta Cerrada',
                    'Interesado',
                    'No Interesado',
                    'Volver a Llamar',
                    'No Contesta'
                ]
            });
            console.log(`   ‚úÖ Formulario creado (ID: ${formulario.id})\n`);
        }

        // ========================
        // 4. CREAR CAMPA√ëA
        // ========================
        console.log('üì¢ PASO 4/5: Creando campa√±a de ejemplo...\n');

        const campanaExistente = await Campana.findOne({
            where: { nombre: 'Campa√±a Testing 2025' }
        });

        let campana;
        if (campanaExistente) {
            console.log(`   ‚è≠Ô∏è  Campa√±a ya existe (ID: ${campanaExistente.id})\n`);
            campana = campanaExistente;
        } else {
            campana = await Campana.create({
                nombre: 'Campa√±a Testing 2025',
                formularioId: formulario.id,
                guion: 'Buenos d√≠as, le llamamos de Welcomedly para presentarle nuestra plataforma de gesti√≥n de call center. ¬øSer√≠a un buen momento para conversar sobre c√≥mo podemos ayudarle a optimizar sus operaciones?',
                estado: true,
                baseDatos: '/uploads/testing_base.csv',
                agentesAsignados: agenteUserIds
            });
            console.log(`   ‚úÖ Campa√±a creada (ID: ${campana.id})`);
            console.log(`   üìé Agentes asignados: ${agenteUserIds.length}`);
            console.log('');
        }

        // ========================
        // 5. CREAR REGISTROS
        // ========================
        console.log('üë• PASO 5/5: Creando registros de contactos...\n');

        const registrosExistentes = await BaseCampana.count({
            where: { campanaId: campana.id }
        });

        if (registrosExistentes > 0) {
            console.log(`   ‚è≠Ô∏è  Ya existen ${registrosExistentes} registros en esta campa√±a\n`);
        } else {
            const contactos = [
                {
                    nombre: 'Juan P√©rez Gonz√°lez',
                    telefono: '3001234567',
                    correo: 'juan.perez@techsolutions.com',
                    otrosCampos: { empresa: 'Tech Solutions SAS', cargo: 'Gerente General', sector: 'Tecnolog√≠a' },
                    campanaId: campana.id
                },
                {
                    nombre: 'Mar√≠a Gonz√°lez Castro',
                    telefono: '3009876543',
                    correo: 'maria.gonzalez@marketingplus.com',
                    otrosCampos: { empresa: 'Marketing Plus', cargo: 'Directora Comercial', sector: 'Marketing' },
                    campanaId: campana.id
                },
                {
                    nombre: 'Carlos Rodr√≠guez L√≥pez',
                    telefono: '3005551234',
                    correo: 'carlos.rodriguez@innovatesa.com',
                    otrosCampos: { empresa: 'Innovate SA', cargo: 'CEO', sector: 'Innovaci√≥n' },
                    campanaId: campana.id
                },
                {
                    nombre: 'Ana Mart√≠nez Silva',
                    telefono: '3007778888',
                    correo: 'ana.martinez@digitalworld.com',
                    otrosCampos: { empresa: 'Digital World', cargo: 'Product Manager', sector: 'Digital' },
                    campanaId: campana.id
                },
                {
                    nombre: 'Luis Fern√°ndez Torres',
                    telefono: '3002223344',
                    correo: 'luis.fernandez@globalcorp.com',
                    otrosCampos: { empresa: 'Global Corp', cargo: 'Supervisor Operaciones', sector: 'Corporativo' },
                    campanaId: campana.id
                },
                {
                    nombre: 'Patricia Ram√≠rez D√≠az',
                    telefono: '3006665555',
                    correo: 'patricia.ramirez@callcenterpro.com',
                    otrosCampos: { empresa: 'Call Center Pro', cargo: 'Gerente de Servicio', sector: 'BPO' },
                    campanaId: campana.id
                },
                {
                    nombre: 'Roberto S√°nchez Mora',
                    telefono: '3004447777',
                    correo: 'roberto.sanchez@ventas360.com',
                    otrosCampos: { empresa: 'Ventas 360', cargo: 'Director Ventas', sector: 'Ventas' },
                    campanaId: campana.id
                }
            ];

            for (const contacto of contactos) {
                await BaseCampana.create(contacto);
                console.log(`   ‚úÖ ${contacto.nombre} (${contacto.empresa})`);
            }

            console.log(`\n   üìä Contactos: ${contactos.length} creados\n`);
        }

        // ========================
        // RESUMEN FINAL
        // ========================
        console.log('========================================');
        console.log('üìä RESUMEN DEL SETUP:\n');
        console.log(`   üë§ Usuarios:       ${usersCreated > 0 ? usersCreated + ' creados' : 'Ya exist√≠an'}`);
        console.log(`   üè∑Ô∏è  Disposiciones:  ${disposicionesCreadas > 0 ? disposicionesCreadas + ' creadas' : 'Ya exist√≠an'}`);
        console.log(`   üìù Formularios:    ${formularioExistente ? 'Ya exist√≠a' : '1 creado'}`);
        console.log(`   üì¢ Campa√±as:       ${campanaExistente ? 'Ya exist√≠a' : '1 creada'}`);
        console.log(`   üë• Contactos:      ${registrosExistentes > 0 ? registrosExistentes + ' ya exist√≠an' : '7 creados'}`);
        console.log('========================================\n');

        console.log('üéâ ¬°Setup completado exitosamente!\n');
        console.log('üîó URLs para probar:\n');
        console.log(`   üè† Inicio:         http://localhost:3000`);
        console.log(`   üîê Login:          http://localhost:3000/auth/login`);
        console.log(`   üì¢ Campa√±as:       http://localhost:3000/campaign/campanas`);
        console.log(`   üìã Formularios:    http://localhost:3000/market/formularios`);
        console.log(`   üë• Agentes:        http://localhost:3000/agents/lista-agentes`);
        console.log(`   üè∑Ô∏è  Disposiciones:  http://localhost:3000/disposiciones/lista\n`);

        console.log('üîë CREDENCIALES:\n');
        console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
        console.log('‚îÇ ROL    ‚îÇ USUARIO         ‚îÇ CONTRASE√ëA          ‚îÇ');
        console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
        console.log('‚îÇ ADMIN  ‚îÇ admin.test      ‚îÇ Test2025!           ‚îÇ');
        console.log('‚îÇ AGENTE ‚îÇ agente.test1    ‚îÇ Test2025!           ‚îÇ');
        console.log('‚îÇ AGENTE ‚îÇ agente.test2    ‚îÇ Test2025!           ‚îÇ');
        console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n');

        console.log('üìñ Siguientes pasos:\n');
        console.log('   1. Iniciar servidor: npm run dev');
        console.log('   2. Abrir navegador: http://localhost:3000');
        console.log('   3. Login con admin.test / Test2025!');
        console.log('   4. Explorar campa√±as y funcionalidades\n');

        console.log('üí° Para compartir con tester externo:');
        console.log('   1. Leer GUIA_TESTING_NGROK.md');
        console.log('   2. Ejecutar: ngrok http 3000');
        console.log('   3. Compartir URL + CREDENCIALES_TESTING.md\n');

    } catch (error) {
        console.error('\n‚ùå ERROR en setup:\n');
        console.error(error);
        console.error('\nüí° Posibles causas:');
        console.error('   - Base de datos no est√° corriendo');
        console.error('   - Redis no est√° disponible');
        console.error('   - Variables de entorno incorrectas');
        console.error('   - Modelos de Sequelize no sincronizados\n');
        process.exit(1);
    }
}

// Ejecutar el setup
setupTestingEnvironment()
    .then(() => {
        console.log('‚úÖ Proceso completado\n');
        process.exit(0);
    })
    .catch(error => {
        console.error('üí• Error fatal:', error);
        process.exit(1);
    });
