version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: welcomedly-postgres
    environment:
      POSTGRES_DB: miappdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - welcomedly-network

  # Redis for caching and Socket.IO adapter
  redis:
    image: redis:7-alpine
    container_name: welcomedly-redis
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - welcomedly-network

  # Asterisk PBX for Telephony (Sprint 3.1.4)
  asterisk:
    image: andrius/asterisk:20
    container_name: welcomedly-asterisk
    ports:
      - "5038:5038"   # AMI
      - "8089:8089"   # WebSocket WSS
      - "5060:5060/udp"   # SIP UDP
      - "10000-10099:10000-10099/udp"  # RTP
    volumes:
      - ./docker/asterisk/manager.conf:/etc/asterisk/manager.conf:ro
      - ./docker/asterisk/pjsip.conf:/etc/asterisk/pjsip.conf:ro
      - ./docker/asterisk/extensions.conf:/etc/asterisk/extensions.conf:ro
      - ./docker/asterisk/queues.conf:/etc/asterisk/queues.conf:ro
      - asterisk-sounds:/var/lib/asterisk/sounds
      - asterisk-monitor:/var/spool/asterisk/monitor
    environment:
      - ASTERISK_UID=1000
      - ASTERISK_GID=1000
    healthcheck:
      test: ["CMD", "asterisk", "-rx", "core show version"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - welcomedly-network
    restart: unless-stopped

  # App Instance 1
  app1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: welcomedly-app1
    environment:
      NODE_ENV: production
      PORT: 3000
      INSTANCE_ID: app1
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: miappdb
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      SESSION_SECRET: ${SESSION_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ASTERISK_HOST: asterisk
      ASTERISK_PORT: 5038
      ASTERISK_USER: welcomedly
      ASTERISK_PASSWORD: ${ASTERISK_PASSWORD:-welcomedly_secret_2025}
      ASTERISK_WSS_HOST: ${ASTERISK_WSS_HOST:-localhost}
      ASTERISK_WSS_PORT: 8089
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      asterisk:
        condition: service_started
    networks:
      - welcomedly-network
    restart: unless-stopped

  # App Instance 2
  app2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: welcomedly-app2
    environment:
      NODE_ENV: production
      PORT: 3000
      INSTANCE_ID: app2
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: miappdb
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      SESSION_SECRET: ${SESSION_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ASTERISK_HOST: asterisk
      ASTERISK_PORT: 5038
      ASTERISK_USER: welcomedly
      ASTERISK_PASSWORD: ${ASTERISK_PASSWORD:-welcomedly_secret_2025}
      ASTERISK_WSS_HOST: ${ASTERISK_WSS_HOST:-localhost}
      ASTERISK_WSS_PORT: 8089
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      asterisk:
        condition: service_started
    networks:
      - welcomedly-network
    restart: unless-stopped

  # App Instance 3
  app3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: welcomedly-app3
    environment:
      NODE_ENV: production
      PORT: 3000
      INSTANCE_ID: app3
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: miappdb
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      SESSION_SECRET: ${SESSION_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ASTERISK_HOST: asterisk
      ASTERISK_PORT: 5038
      ASTERISK_USER: welcomedly
      ASTERISK_PASSWORD: ${ASTERISK_PASSWORD:-welcomedly_secret_2025}
      ASTERISK_WSS_HOST: ${ASTERISK_WSS_HOST:-localhost}
      ASTERISK_WSS_PORT: 8089
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      asterisk:
        condition: service_started
    networks:
      - welcomedly-network
    restart: unless-stopped

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: welcomedly-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app1
      - app2
      - app3
    networks:
      - welcomedly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  welcomedly-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  asterisk-sounds:
    driver: local
  asterisk-monitor:
    driver: local
