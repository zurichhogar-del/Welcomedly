/**
 * Test de validaci√≥n de autenticaci√≥n WebSocket - Sprint 1.1
 * Prueba que las conexiones WebSocket validan correctamente las sesiones
 */

import { io } from 'socket.io-client';
import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3000';
const TEST_CREDENTIALS = {
    correo: 'admin@test.com',
    contrasena: 'admin123'
};

/**
 * Test 1: Login y obtener cookie de sesi√≥n
 */
async function testLogin() {
    console.log('\nüîê Test 1: Login y obtenci√≥n de sesi√≥n...');

    try {
        const response = await fetch(`${BASE_URL}/auth/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams(TEST_CREDENTIALS),
            redirect: 'manual' // No seguir redirects para capturar cookies
        });

        const cookies = response.headers.get('set-cookie');

        if (!cookies) {
            console.error('‚ùå No se recibieron cookies en la respuesta');
            return null;
        }

        // Extraer cookie connect.sid
        const sessionCookie = cookies.split(',')
            .find(cookie => cookie.trim().startsWith('connect.sid='));

        if (!sessionCookie) {
            console.error('‚ùå No se encontr√≥ cookie connect.sid');
            return null;
        }

        console.log('‚úÖ Login exitoso, cookie obtenida');
        console.log('   Cookie:', sessionCookie.substring(0, 50) + '...');

        return sessionCookie;
    } catch (error) {
        console.error('‚ùå Error en login:', error.message);
        return null;
    }
}

/**
 * Test 2: Conectar WebSocket con sesi√≥n v√°lida
 */
async function testWebSocketWithValidSession(sessionCookie) {
    console.log('\nüîå Test 2: Conexi√≥n WebSocket con sesi√≥n v√°lida...');

    return new Promise((resolve, reject) => {
        const socket = io(BASE_URL, {
            transports: ['websocket', 'polling'],
            upgrade: true
        });

        let authenticated = false;
        let timeout;

        socket.on('connect', () => {
            console.log('   Conectado al servidor WebSocket');

            // Enviar autenticaci√≥n con cookie real
            socket.emit('authenticate', {
                sessionCookie: sessionCookie
            });

            // Timeout de 5 segundos
            timeout = setTimeout(() => {
                if (!authenticated) {
                    socket.close();
                    reject(new Error('Timeout esperando autenticaci√≥n'));
                }
            }, 5000);
        });

        socket.on('authenticated', (data) => {
            clearTimeout(timeout);
            authenticated = true;

            if (data.success) {
                console.log('‚úÖ Autenticaci√≥n WebSocket exitosa');
                console.log('   Usuario ID:', data.userId);
                console.log('   Rol:', data.role);
                socket.close();
                resolve(true);
            } else {
                console.error('‚ùå Autenticaci√≥n fallida:', data.error);
                socket.close();
                reject(new Error(data.error));
            }
        });

        socket.on('error', (error) => {
            clearTimeout(timeout);
            console.error('‚ùå Error en WebSocket:', error);
            socket.close();
            reject(error);
        });

        socket.on('connect_error', (error) => {
            clearTimeout(timeout);
            console.error('‚ùå Error de conexi√≥n:', error.message);
            socket.close();
            reject(error);
        });
    });
}

/**
 * Test 3: Conectar WebSocket sin sesi√≥n (debe fallar)
 */
async function testWebSocketWithoutSession() {
    console.log('\nüö´ Test 3: Conexi√≥n WebSocket sin sesi√≥n (debe fallar)...');

    return new Promise((resolve, reject) => {
        const socket = io(BASE_URL, {
            transports: ['websocket', 'polling'],
            upgrade: true
        });

        let timeout;

        socket.on('connect', () => {
            console.log('   Conectado al servidor WebSocket');

            // Enviar autenticaci√≥n sin cookie
            socket.emit('authenticate', {
                sessionCookie: ''
            });

            timeout = setTimeout(() => {
                socket.close();
                reject(new Error('Timeout esperando respuesta'));
            }, 5000);
        });

        socket.on('authenticated', (data) => {
            clearTimeout(timeout);

            if (!data.success) {
                console.log('‚úÖ Autenticaci√≥n rechazada correctamente (esperado)');
                console.log('   Error:', data.error);
                socket.close();
                resolve(true);
            } else {
                console.error('‚ùå ERROR: Autenticaci√≥n exitosa sin sesi√≥n v√°lida!');
                socket.close();
                reject(new Error('Autenticaci√≥n no deber√≠a haber sido exitosa'));
            }
        });

        socket.on('error', (error) => {
            clearTimeout(timeout);
            socket.close();
            reject(error);
        });
    });
}

/**
 * Test 4: Conectar WebSocket con sesi√≥n inv√°lida
 */
async function testWebSocketWithInvalidSession() {
    console.log('\nüîí Test 4: Conexi√≥n WebSocket con sesi√≥n inv√°lida (debe fallar)...');

    return new Promise((resolve, reject) => {
        const socket = io(BASE_URL, {
            transports: ['websocket', 'polling'],
            upgrade: true
        });

        let timeout;

        socket.on('connect', () => {
            console.log('   Conectado al servidor WebSocket');

            // Enviar autenticaci√≥n con cookie falsa
            socket.emit('authenticate', {
                sessionCookie: 'connect.sid=s%3Afake-session-id.fake-signature'
            });

            timeout = setTimeout(() => {
                socket.close();
                reject(new Error('Timeout esperando respuesta'));
            }, 5000);
        });

        socket.on('authenticated', (data) => {
            clearTimeout(timeout);

            if (!data.success) {
                console.log('‚úÖ Sesi√≥n inv√°lida rechazada correctamente (esperado)');
                console.log('   Error:', data.error);
                socket.close();
                resolve(true);
            } else {
                console.error('‚ùå ERROR: Autenticaci√≥n exitosa con sesi√≥n inv√°lida!');
                socket.close();
                reject(new Error('Sesi√≥n inv√°lida no deber√≠a ser aceptada'));
            }
        });

        socket.on('error', (error) => {
            clearTimeout(timeout);
            socket.close();
            reject(error);
        });
    });
}

/**
 * Ejecutar todos los tests
 */
async function runAllTests() {
    console.log('\n' + '='.repeat(60));
    console.log('üß™ TESTS DE AUTENTICACI√ìN WEBSOCKET - Sprint 1.1');
    console.log('='.repeat(60));

    let passed = 0;
    let failed = 0;

    try {
        // Test 1: Login
        const sessionCookie = await testLogin();
        if (!sessionCookie) {
            console.error('\n‚ùå No se pudo obtener sesi√≥n, abortando tests');
            process.exit(1);
        }
        passed++;

        // Test 2: WebSocket con sesi√≥n v√°lida
        try {
            await testWebSocketWithValidSession(sessionCookie);
            passed++;
        } catch (error) {
            console.error('‚ùå Test 2 fall√≥:', error.message);
            failed++;
        }

        // Test 3: WebSocket sin sesi√≥n
        try {
            await testWebSocketWithoutSession();
            passed++;
        } catch (error) {
            console.error('‚ùå Test 3 fall√≥:', error.message);
            failed++;
        }

        // Test 4: WebSocket con sesi√≥n inv√°lida
        try {
            await testWebSocketWithInvalidSession();
            passed++;
        } catch (error) {
            console.error('‚ùå Test 4 fall√≥:', error.message);
            failed++;
        }

    } catch (error) {
        console.error('\n‚ùå Error ejecutando tests:', error.message);
        failed++;
    }

    // Resumen
    console.log('\n' + '='.repeat(60));
    console.log('üìä RESUMEN DE TESTS');
    console.log('='.repeat(60));
    console.log(`‚úÖ Tests pasados: ${passed}`);
    console.log(`‚ùå Tests fallidos: ${failed}`);
    console.log(`üìà Total: ${passed + failed}`);

    if (failed === 0) {
        console.log('\nüéâ TODOS LOS TESTS PASARON - WebSocket auth funcional!');
        process.exit(0);
    } else {
        console.log('\n‚ö†Ô∏è  ALGUNOS TESTS FALLARON - Revisar implementaci√≥n');
        process.exit(1);
    }
}

// Ejecutar tests
runAllTests().catch(error => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
});
