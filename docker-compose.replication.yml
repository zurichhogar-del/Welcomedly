version: '3.8'

# Docker Compose with PostgreSQL Primary-Replica Replication
# Fase 4.2: Database Replication for High Availability

services:
  # PostgreSQL Primary (Master)
  postgres-primary:
    image: postgres:15-alpine
    container_name: welcomedly-postgres-primary
    environment:
      POSTGRES_DB: miappdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-replicator_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./docker/postgres/primary-init.sh:/docker-entrypoint-initdb.d/01-primary-init.sh:ro
    command: postgres -c 'wal_level=replica' -c 'max_wal_senders=10' -c 'max_replication_slots=10' -c 'hot_standby=on'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - welcomedly-network

  # PostgreSQL Replica 1 (Read-only)
  postgres-replica1:
    image: postgres:15-alpine
    container_name: welcomedly-postgres-replica1
    environment:
      POSTGRES_DB: miappdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-replicator_password}
      PRIMARY_HOST: postgres-primary
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    volumes:
      - postgres-replica1-data:/var/lib/postgresql/data
      - ./docker/postgres/replica-init.sh:/docker-entrypoint-initdb.d/01-replica-init.sh:ro
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - welcomedly-network

  # PostgreSQL Replica 2 (Read-only)
  postgres-replica2:
    image: postgres:15-alpine
    container_name: welcomedly-postgres-replica2
    environment:
      POSTGRES_DB: miappdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-replicator_password}
      PRIMARY_HOST: postgres-primary
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5434:5432"
    volumes:
      - postgres-replica2-data:/var/lib/postgresql/data
      - ./docker/postgres/replica-init.sh:/docker-entrypoint-initdb.d/01-replica-init.sh:ro
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - welcomedly-network

  # Redis for caching and Socket.IO adapter
  redis:
    image: redis:7-alpine
    container_name: welcomedly-redis
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - welcomedly-network

  # App Instance 1
  app1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: welcomedly-app1
    environment:
      NODE_ENV: production
      PORT: 3000
      INSTANCE_ID: app1
      # Primary database (writes)
      DB_HOST: postgres-primary
      DB_PORT: 5432
      DB_NAME: miappdb
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      # Read replicas
      DB_REPLICA1_HOST: postgres-replica1
      DB_REPLICA2_HOST: postgres-replica2
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      SESSION_SECRET: ${SESSION_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
    depends_on:
      postgres-primary:
        condition: service_healthy
      postgres-replica1:
        condition: service_healthy
      postgres-replica2:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - welcomedly-network
    restart: unless-stopped

  # App Instance 2
  app2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: welcomedly-app2
    environment:
      NODE_ENV: production
      PORT: 3000
      INSTANCE_ID: app2
      DB_HOST: postgres-primary
      DB_PORT: 5432
      DB_NAME: miappdb
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_REPLICA1_HOST: postgres-replica1
      DB_REPLICA2_HOST: postgres-replica2
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      SESSION_SECRET: ${SESSION_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
    depends_on:
      postgres-primary:
        condition: service_healthy
      postgres-replica1:
        condition: service_healthy
      postgres-replica2:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - welcomedly-network
    restart: unless-stopped

  # App Instance 3
  app3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: welcomedly-app3
    environment:
      NODE_ENV: production
      PORT: 3000
      INSTANCE_ID: app3
      DB_HOST: postgres-primary
      DB_PORT: 5432
      DB_NAME: miappdb
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_REPLICA1_HOST: postgres-replica1
      DB_REPLICA2_HOST: postgres-replica2
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      SESSION_SECRET: ${SESSION_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
    depends_on:
      postgres-primary:
        condition: service_healthy
      postgres-replica1:
        condition: service_healthy
      postgres-replica2:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - welcomedly-network
    restart: unless-stopped

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: welcomedly-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app1
      - app2
      - app3
    networks:
      - welcomedly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  welcomedly-network:
    driver: bridge

volumes:
  postgres-primary-data:
    driver: local
  postgres-replica1-data:
    driver: local
  postgres-replica2-data:
    driver: local
  redis-data:
    driver: local
